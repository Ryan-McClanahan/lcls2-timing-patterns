Repository for LCLS2 timing pattern data.  Includes tools for simulating, validating, and programming timing patterns.

patterns: Directory of available patterns.  Includes

  a[0-..]_d[0-13].py        - allow sequence per destination
  d[0-13].py                - destination beam requests
  c[0-16].py                - control requests
  description.txt           - textual description
  validation.dat            - destn/control statistics
  			      sum over 1 TPG second for each set of conditions (PC*dest)
			      first/last bucket requested
			      min/max interval between requests
			      max requests within each PC window** (still need to add this, used in PC calc for variable charge)

pcdef.py - python dictionary of power class defining parameters

tools: python utilities for generation, simulation, execution, validation

  generation:

  simulation:
    individual:
      calculate statistics for validation { 1sec sum, min spacing, max spacing }

    pattern:
      read pattern directory and simulate across all inputs
      outputs are { beam requests, PC0[Allowed,Generated], PC1[], ... } per destination
        gets written to "pattern/validation.dat"
        plots for timeslot range, PC settings per destination
    visualization:
      inputs are { timeslot mode [AC/Fixed], timeslot range }

  execution:
    GUI tells HLA to execute pattern which includes entire subdirectory of sequences
    maps to facility modes (destn)
    given charge, determine PC of allow table sequences
      program allow table [ register array of sub-sequence start addr and pattern PC,
      	      	            indexed by MPS asserted PC ]
      requires min separation and max bunches within PC window for each allow sequence
      (from simulation)

  validation:
    other IOC executing on special node takes validation.dat and confirms for each
      destination when PC does not change
    errors can be trapped and archived
      { timestamp, pulseid, fixed/ac rates, beam request, mps status }

  scripts:
    patterngenerator.py --output <dir>
      Generates destination programming sequences for patterns described within
      a dictionary in patterngenerator.py.  Products are placed in <dir>/<pattern_name>/.

    patternprogrammer.py --pattern <pattern subdirectory> --pv <TPG PV base>
      Programs all sequences for the pattern and executes

    seqplot.py --start <bucket> --stop <bucket> <sequence.py>
      PyQt plot of (trigger bits vs) buckets populated

    seqprogram.py <sequence.py> <TPG sequence engine PV>
      Programs an individual sequence engine

    seqsim.py --pattern <pattern subdirectory> --start <bucket> --stop <bucket> --mode <CW/AC>
      Simulate 
